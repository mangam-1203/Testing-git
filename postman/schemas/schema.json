{
    "openapi": "3.0.1",
    "info": {
        "title": "Botco APIvgrv",
        "description": "Documentation for the Botco Platform API rev.3",
        "contact": {
            "name": "Enric Ribas",
            "url": "https://botco.ai/",
            "email": "enric.ribas@botco.ai"
        },
        "version": "0.1"
    },
    "servers": [
        {
            "url": "http://apidev.botco.ai",
            "description": "Generated server url"
        }
    ],
    "paths": {
        "/agents": {
            "get": {
                "tags": [
                    "agents"
                ],
                "summary": "Returns a list of Agents for provided criteria",
                "description": "Given criteria in request, will return a list of Agents for logging matching criteria.",
                "operationId": "findAll",
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Agent"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "agents"
                ],
                "summary": "Create a new Agent",
                "description": "Create a new Agent",
                "operationId": "addAgent",
                "parameters": [
                    {
                        "name": "template_id",
                        "in": "query",
                        "description": "Template ID to copy",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Agent"
                            },
                            "example": {
                                "account_id": 1,
                                "agent_name": "test name"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/deployments/ready": {
            "get": {
                "tags": [
                    "agents"
                ],
                "summary": "Find a list Agent for provided criteria",
                "description": "Find all agents for logged in user who have deployments ready to show.",
                "operationId": "findAllWithRuntimeTenantId",
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Agent"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}": {
            "get": {
                "tags": [
                    "agents"
                ],
                "summary": "Find an Agent by ID",
                "description": "If submitted ID is not found in the database, null is return.",
                "operationId": "findById",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find agent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "agents"
                ],
                "summary": "Update an Agent by ID",
                "description": "Update an Agent by ID",
                "operationId": "updateAgent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Update agentId by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Agent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "agents"
                ],
                "summary": "Delete an Agent",
                "description": "Delete an Agent",
                "operationId": "deleteAgent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Delete Agent by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/entities": {
            "get": {
                "tags": [
                    "entities"
                ],
                "summary": "Find all Agent Entity by Agent ID",
                "description": "Find all Agent Entity by Agent ID",
                "operationId": "findItemsByAgentId",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentEntityResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "entities"
                ],
                "summary": "Create a new Agent Entity",
                "description": "Create a new Agent Entity",
                "operationId": "addAgentEntity",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentEntityRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentEntity"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/entities/{entityId}": {
            "get": {
                "tags": [
                    "entities"
                ],
                "summary": "Find Agent Entity by ID",
                "description": "Find Agent Entity by ID",
                "operationId": "findAgentEntityBytId",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Find agent Entity for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentEntityResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/entities/{entityId}/items": {
            "get": {
                "tags": [
                    "entities"
                ],
                "summary": "Find all Agent Entity Items by entity ID",
                "description": "Find all Agent Entity Items by entity ID",
                "operationId": "findItemsById",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Find agent entity Items for entity ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 4
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentEntityItemRequest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "entities"
                ],
                "summary": "Create a new List of Agent Entity Items by a Agent Entity Id",
                "description": "Create a new List of Agent Entity Items for a Agent Entity it already exists",
                "operationId": "addAgentEntityItems",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Agent Entity ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Object with Agent Entity info to be created",
                                "items": {
                                    "$ref": "#/components/schemas/AgentEntityItemRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentEntityItemRequest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/entities/{agentEntityId}": {
            "put": {
                "tags": [
                    "entities"
                ],
                "summary": "Update a Agent Entity",
                "description": "Update a Agent Entity",
                "operationId": "updateAgentEntity",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "agentEntityId",
                        "in": "path",
                        "description": "Update Agent Entity by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentEntityRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentEntityResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "entities"
                ],
                "summary": "Delete an Agent Entity ",
                "description": "Delete an Agent Entity and its items",
                "operationId": "deleteAgentEntity",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "agentEntityId",
                        "in": "path",
                        "description": "Delete Agent Entity by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/entities/{entityId}/items/{entityItemId}": {
            "put": {
                "tags": [
                    "entities"
                ],
                "summary": "Update an Agent Entity Item",
                "description": "Update an Agent Entity Item ",
                "operationId": "updateAgentEntityItem",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Find Agent Entity by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "entityItemId",
                        "in": "path",
                        "description": "Update Agent Entity Item by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentEntityItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentEntityItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "entities"
                ],
                "summary": "Delete an Agent Entity Item",
                "description": "Delete an Agent Entity Item",
                "operationId": "deleteAgentEntityItem",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find entities for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Find an Agent Entity Item by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "entityItemId",
                        "in": "path",
                        "description": "Delete Agent Entity Item by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/overview": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Analytics summary data for user.",
                "description": "A normal request must include start time.",
                "operationId": "getOverviewAnalytic",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoDashOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/overview/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Analytics summary data for agent.",
                "description": "A normal request must include start time.",
                "operationId": "getAgentOverviewAnalytic",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics overview for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "160,229"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoDashOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/overview/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Analytics summary data for deployments.",
                "description": "A normal request must include start time.",
                "operationId": "getDeployOverviewAnalytic",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics overview for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics overview for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoDashOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/metric/{metricId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find a list of Dashboard Analytics metric for user.",
                "description": "A normal request must include start time and metric.",
                "operationId": "getAnalytics",
                "parameters": [
                    {
                        "name": "metricId",
                        "in": "path",
                        "description": "Type of metric. Metrics are: 1) Total of Users; 2) Incoming Messages; 3) Messages per Session; 4) Engaged Sessions; 5) Average Session Duration",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 1
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/metric/{metricId}/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find a list of Dashboard Analytics metric for provided criteria",
                "description": "A normal request must include start time and metric, and agent ID.",
                "operationId": "getAgentAnalytics",
                "parameters": [
                    {
                        "name": "metricId",
                        "in": "path",
                        "description": "Type of metric. Metrics are: 1) Total of Users; 2) Incoming Messages; 3) Messages per Session; 4) Engaged Sessions; 5) Average Session Duration",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 1
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics for these agents",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/metric/{metricId}/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find a list of Dashboard Analytics metric for provided criteria",
                "description": "A normal request must include start time and metric, agent ID and deploy ID.",
                "operationId": "getDeployAnalytics",
                "parameters": [
                    {
                        "name": "metricId",
                        "in": "path",
                        "description": "Type of metric. Metrics are: 1) Total of Users; 2) Incoming Messages; 3) Messages per Session; 4) Engaged Sessions; 5) Average Session Duration",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 1
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics for these agents",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "32,33"
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics for these deployments",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "32,33"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/metric/all/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find a list of Dashboard Analytics metric for user.",
                "description": "A normal request must include start time and metric.",
                "operationId": "getAnalyticsAllMetrics",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics for these agents",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "32,33"
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics for these deployments",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "32,33"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/metric/all/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find a list of Dashboard Analytics metric for user.",
                "description": "A normal request must include start time and metric.",
                "operationId": "getAnalyticsAllMetrics_1",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics for these agents",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "32,33"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/metric/all": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find a list of Dashboard Analytics metric for user.",
                "description": "A normal request must include start time and metric.",
                "operationId": "getAnalyticsAllMetrics_2",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/conversations": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find data for Dashboard Conversation widget for user.",
                "description": "A normal request must include start time and size.",
                "operationId": "getUserConversationWidgetAnalytics",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Define the return size of the list",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find messages analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find messages analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An conversation widget with list of messages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationWidget"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/conversations/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find data for Dashboard Conversation widget for provided criteria",
                "description": "A normal request must include start time and size, deploy ID.",
                "operationId": "getConversationWidgetAnalytics",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics for these deployment",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Define the return size of the list",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find messages analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find messages analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An conversation widget with list of messages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationWidget"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/conversations/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Find data for Dashboard Conversation widget for provided criteria",
                "description": "A normal request must include start time and size, deploy ID and agent ID.",
                "operationId": "getConversationWidgetAnalytics_1",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics for these agent",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics for these deployment",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Define the return size of the list",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find messages analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find messages analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An conversation widget with list of messages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationWidget"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/count": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents and Events analytics counts summary data for user.",
                "description": "A normal request must include start time.",
                "operationId": "getIntentEventsAnalytic",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoIntentEventOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/count/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents and Events analytics counts summary data for agent.",
                "description": "A normal request must include start time.",
                "operationId": "getAgentIntentEventsAnalytic",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics count for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "160,229"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoIntentEventOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/count/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents and Events analytics counts summary data for deployments.",
                "description": "A normal request must include start time.",
                "operationId": "getDeployIntentEventsAnalytic",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics count for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics count for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoIntentEventOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/message": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents and Events analytics top messages summary data for user.",
                "description": "A normal request must include start time.",
                "operationId": "getIntentEventsMessagesAnalytic",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Define the return size of the list",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoIntentEventMessageOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/message/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents and Events analytics top messages summary data for agent.",
                "description": "A normal request must include start time.",
                "operationId": "getAgentIntentEventsMessagesAnalytic",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Define the return size of the list",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "160,229"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoIntentEventMessageOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/message/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents and Events analytics top messages summary data for deployments.",
                "description": "A normal request must include start time.",
                "operationId": "getDeployIntentEventsMessagesAnalytic",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Define the return size of the list",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotcoIntentEventMessageOverview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/intents": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents analytics top messages summary data paginated.",
                "description": "A normal request must include either deploy ID or agent ID and start time.",
                "operationId": "findAllDashFactIntentByDeploy",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find analytics message for these deployment ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "agent_id",
                        "in": "query",
                        "description": "Find analytics message for these agent ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "0"
                                }
                            }
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "20"
                                }
                            }
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentMsg"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/events": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Events analytics top messages summary data paginated.",
                "description": "A normal request must include either deploy ID or agent ID and start time.",
                "operationId": "findAllDashFactEventByDeploy",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "0"
                                }
                            }
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "20"
                                }
                            }
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentMsg"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/intents/percentage": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Intents analytics top messages percentage data paginated.",
                "description": "A normal request must include either deploy ID or agent ID, limit and start time.",
                "operationId": "findAllPercentageDashFactIntentByDeploy",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find analytics message for these deployment ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "agent_id",
                        "in": "query",
                        "description": "Find analytics message for these agent ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Define the return size of the list, the rest will be grouped",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentMsg"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/intent-events/events/percentage": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Events analytics top messages percentage data paginated.",
                "description": "A normal request must include either deploy ID or agent ID, limit and start time.",
                "operationId": "findAllPercentageDashFactEventByDeploy",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Define the return size of the list, the rest will be grouped",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 5
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentMsg"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/reengagements": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Summary Re-engagement data for user.",
                "description": "A normal request must include start time.",
                "operationId": "getDashUserSessionReengagement",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotCoDashSessionReEngagementResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/reengagements/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Summary Re-engagement data for an Agent.",
                "description": "A normal request must include start time.",
                "operationId": "getDashAgentSessionReengagement",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "160,229"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotCoDashSessionReEngagementResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/reengagements/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Summary Re-engagement data for an Deployment.",
                "description": "A normal request must include start time.",
                "operationId": "getDashDeploymentSessionReengagement",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BotCoDashSessionReEngagementResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/handovers/per-day": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Handovers event per day for User.",
                "description": "A normal request must include start time.",
                "operationId": "getHandoverEventsUserPerDay",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/handovers/per-day/{agentId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Handovers event per day for Agent.",
                "description": "A normal request must include start time.",
                "operationId": "getHandoverEventsAgentPerDay",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": "160,229"
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/analytics/handovers/per-day/{agentId}/{deployId}": {
            "get": {
                "tags": [
                    "analytics-controller"
                ],
                "summary": "Handovers event per day for Deployment.",
                "description": "A normal request must include start time.",
                "operationId": "getHandoverEventsDeployPerDay",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    },
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find analytics message for these deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 33
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find analytics that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find analytics that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The summary data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BotcoDashMetric"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app/version": {
            "get": {
                "tags": [
                    "app"
                ],
                "summary": "Returns the API version number.",
                "description": "Returns the API version number.",
                "operationId": "getApiVersion",
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AppVersionResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "authentication-controller"
                ],
                "summary": "Log user into the system.",
                "description": "If not found, 404 is return. If password and username don't match, 401 is return.",
                "operationId": "createAuthenticationToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "tags": [
                    "authentication-controller"
                ],
                "summary": "Generate new access token for the user based on the refresh user.If refresh token is invalid, 401 is return.",
                "operationId": "refreshAuthenticationToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/assets/upload": {
            "post": {
                "tags": [
                    "upload"
                ],
                "summary": "Upload an Image or video to Aws S3",
                "description": "Upload an Image or video to Aws S3, the file size cannot be greater than 3mb for images and 100mb for videos",
                "operationId": "uploadFile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "image or video",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "multipart/form-data": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/attributes": {
            "get": {
                "tags": [
                    "customer-attribute"
                ],
                "summary": "Find all Customer Attribute by agent ID",
                "description": "Find all Customer Attribute by agent ID",
                "operationId": "findAll_1",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find customer attribute data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerAttribute"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "customer-attribute"
                ],
                "summary": "Create a new Customer Attribute",
                "description": "Create a new Customer Attribute",
                "operationId": "createCustomerAttribute",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find customer attribute data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/attributes/{custAttrId}": {
            "get": {
                "tags": [
                    "customer-attribute"
                ],
                "summary": "Find Customer Attribute by id",
                "description": "Find Customer Attribute by id",
                "operationId": "findById_1",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find customer attribute data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "custAttrId",
                        "in": "path",
                        "description": "customer attribute ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "customer-attribute"
                ],
                "summary": "Update an existing Customer Attribute",
                "description": "Update an existing  Customer Attribute",
                "operationId": "updateCustomerAttribute",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find customer attribute data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "custAttrId",
                        "in": "path",
                        "description": "customer attribute ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "customer-attribute"
                ],
                "summary": "Delete an existing Customer Attribute",
                "description": "Delete an existing Customer Attribute",
                "operationId": "deleteCustomerAttribute",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find customer attribute data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "custAttrId",
                        "in": "path",
                        "description": "customer attribute ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}/attributes": {
            "get": {
                "tags": [
                    "deploy-attributes"
                ],
                "summary": "Find deployment attributes by deploy ID",
                "operationId": "findByDeployId",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find for deploy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The deploy attributes for requested ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeployAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this deploy ID"
                    },
                    "404": {
                        "description": "The deploy ID does not exist or no attributes found"
                    }
                }
            },
            "post": {
                "tags": [
                    "deploy-attributes"
                ],
                "summary": "Create deployment attributes",
                "description": "If deployment doesn't exist, 404 is return.",
                "operationId": "create",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find for deploy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeployAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeployAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/bot/attributes": {
            "get": {
                "tags": [
                    "deploy-attributes"
                ],
                "summary": "Find deployment attributes by API key",
                "description": "Unauthenticated endpoint that bots can use to pull their attributes",
                "operationId": "findByApiKey",
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "query",
                        "description": "API Key for attributes",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "botco_api_k915kiot_71993"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The attributes for this deploy ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeployAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The API key does not exist"
                    }
                }
            }
        },
        "/deployments/{deployId}/deploy": {
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Deploy a deployment",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "deploy",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Start delete for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "Find a list Deployment for provided criteria",
                "description": "If submitted agent ID is not found in the database, will return empty. If runtime_tenant_id is false then will returns all tenant, if not then will filter by not null.",
                "operationId": "findAll_2",
                "parameters": [
                    {
                        "name": "agent_id",
                        "in": "query",
                        "description": "Find deployments for agent ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "runtime_tenant_id",
                        "in": "query",
                        "description": "Find deployments with runtime_tenant_id",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Deployment"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Deploy a bot",
                "description": "If deployment trying to create exist, 400 is return.",
                "operationId": "createDeploy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "Find an Deployment by ID",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "findById_2",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find for deploy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Re-deploys a bot",
                "description": "It will update deployment attribute specified and set status to deploy. If submitted ID is not found in the database, 404 is return. If deployment request status is not 0, 404 is return",
                "operationId": "updateDeploy",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Update deploy with ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}/delete": {
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Deletes a deployment",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Start delete for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}/start": {
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Starts a deployment",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "start",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Start deployment for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}/stop": {
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Stops a deployment",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "stop",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Start stop for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/facebook-menus": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "Find all Facebook Menu by Agent ID",
                "description": "If submitted agent ID is not found in the database, null is return.",
                "operationId": "findByAgentId",
                "parameters": [
                    {
                        "name": "agent_id",
                        "in": "query",
                        "description": "Find agent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 160
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DeploymentFacebookMenu"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Create a new Facebook Menu",
                "description": "Create a new Deployment Facebook Menu",
                "operationId": "addMenu",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentFacebookMenu"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenu"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/facebook-menus/{fbMenuId}": {
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Update a Facebook Menu",
                "description": "Update a Deployment Facebook Menu",
                "operationId": "updateMenu",
                "parameters": [
                    {
                        "name": "fbMenuId",
                        "in": "path",
                        "description": "Update Facebook Menu by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentFacebookMenu"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenu"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Create a new Facebook Menu Item by a Facebook Menu Id",
                "description": "Create a new Deployment Facebook Menu Item for a Facebook Menu it already exists",
                "operationId": "addMenuItem",
                "parameters": [
                    {
                        "name": "fbMenuId",
                        "in": "path",
                        "description": "Facebook Menu ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentFacebookMenuItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenuItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "deployments"
                ],
                "summary": "Delete a Facebook Menu",
                "description": "Delete a Deployment Facebook Menu",
                "operationId": "deleteMenu",
                "parameters": [
                    {
                        "name": "fbMenuId",
                        "in": "path",
                        "description": "Delete Facebook Menu by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenu"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/facebook-menus/{fbMenuId}/facebook-menu-item/{fbMenuItemId}": {
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Update a Facebook Menu Item",
                "description": "Update a Deployment Facebook Menu Item ",
                "operationId": "updateMenuItem",
                "parameters": [
                    {
                        "name": "fbMenuId",
                        "in": "path",
                        "description": "Find Facebook Menu  by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "fbMenuItemId",
                        "in": "path",
                        "description": "Update Facebook Menu Item by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentFacebookMenuItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenu"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "deployments"
                ],
                "summary": "Delete a Facebook Menu Item",
                "description": "Delete a Deployment Facebook Menu Item",
                "operationId": "deleteMenuItem",
                "parameters": [
                    {
                        "name": "fbMenuId",
                        "in": "path",
                        "description": "Find Facebook Menu  by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "fbMenuItemId",
                        "in": "path",
                        "description": "Delete Facebook Menu Item by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenuItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/facebook-menus/{fbMenuId}/facebook-menu-item/all": {
            "delete": {
                "tags": [
                    "deployments"
                ],
                "summary": "Delete all Facebook Menu items",
                "description": "Delete a ALL items of Facebook Menu",
                "operationId": "deleteAllMenuItems",
                "parameters": [
                    {
                        "name": "fbMenuId",
                        "in": "path",
                        "description": "Delete Facebook Menu by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookMenu"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}/facebook-greetings": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "Find the first deployment facebook greeting record for a deploy ID.",
                "description": "Find the first deployment facebook greeting record for a deploy ID.",
                "operationId": "findByDeployId_1",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find facebook greeting data for deploy Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookGreeting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "deployments"
                ],
                "summary": "Create or Update a deployment facebook greeting",
                "description": "Create a new deployment facebook greeting or update it if this already exists",
                "operationId": "createDeploymentFacebookGreeting",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find deployment facebook greeting data for deploy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentFacebookGreeting"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookGreeting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployId}/facebook-greetings/{fbGreetingId}": {
            "get": {
                "tags": [
                    "deployments"
                ],
                "summary": "Find deployment facebook greeting by id",
                "description": "Find deployment facebook greeting by id",
                "operationId": "findById_3",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find deployment facebook greeting data for deploy Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fbGreetingId",
                        "in": "path",
                        "description": "deployment facebook greeting Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookGreeting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "deployments"
                ],
                "summary": "Update a deployment facebook greeting.",
                "description": "Update a deployment facebook greeting.",
                "operationId": "updateDeploymentFacebookGreeting",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find deployment facebook greeting data for deploy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fbGreetingId",
                        "in": "path",
                        "description": "deployment facebook greeting ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeploymentFacebookGreeting"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentFacebookGreeting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "deployments"
                ],
                "summary": "Delete an existing deployment facebook greeting.",
                "description": "Delete an existing deployment facebook greeting.",
                "operationId": "deleteDeploymentFacebookGreeting",
                "parameters": [
                    {
                        "name": "deployId",
                        "in": "path",
                        "description": "Find deployment facebook greeting data for deploy Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fbGreetingId",
                        "in": "path",
                        "description": "customer attribute ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/referrals/multiple": {
            "post": {
                "tags": [
                    "referrals"
                ],
                "summary": "Create a multiple Deployment Referral",
                "description": "Create a set of new Deployment Referral",
                "operationId": "createMultiple",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Object with referrals info to be created",
                                "items": {
                                    "$ref": "#/components/schemas/Referral"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Referral"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/referrals/{referId}": {
            "get": {
                "tags": [
                    "referrals"
                ],
                "summary": "Find an Deployment Referral by ID",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "findById_4",
                "parameters": [
                    {
                        "name": "referId",
                        "in": "path",
                        "description": "Find deployment referral for refer ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Referral"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "referrals"
                ],
                "summary": "Update an Deployment Referral by ID",
                "description": "Update an Deployment Referral by ID",
                "operationId": "update",
                "parameters": [
                    {
                        "name": "referId",
                        "in": "path",
                        "description": "Find deployment referral for refer ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Referral"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Referral"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "referrals"
                ],
                "summary": "Remove all entities related to Deployment Referral",
                "description": "Remove all entities related to Deployment Referral, If they exist",
                "operationId": "delete_1",
                "parameters": [
                    {
                        "name": "referId",
                        "in": "path",
                        "description": "Object with referral info to be created",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Referral"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/referrals": {
            "get": {
                "tags": [
                    "referrals"
                ],
                "summary": "Find a list of Deployment Referral for provided criteria",
                "operationId": "findAll_3",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find deployment referral for deploy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Referral"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "referrals"
                ],
                "summary": "Create a new Deployment Referral",
                "description": "Create a new Deployment Referral",
                "operationId": "create_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Referral"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Referral"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/referrals/{referId}/contexts": {
            "post": {
                "tags": [
                    "referrals"
                ],
                "summary": "Add new Deployment Referral Context to existing Referral",
                "description": "Create a new Referral context",
                "operationId": "addContext",
                "parameters": [
                    {
                        "name": "referId",
                        "in": "path",
                        "description": "Find deployment referral for refer ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReferralContext"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Referral"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms/{formId}/blocks": {
            "get": {
                "tags": [
                    "forms"
                ],
                "summary": "Find all form blocks for form id",
                "description": "Find all form blocks for a form id",
                "operationId": "getFormBlocks",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FormBlock"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "forms"
                ],
                "summary": "Create a new Form Block",
                "description": "Create a new Form Block, by default a Form block Question will be created with the question name empty",
                "operationId": "createFormBlock",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Delete Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormBlock"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormBlock"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms/{formId}/blocks/{formBlockId}/questions": {
            "get": {
                "tags": [
                    "forms"
                ],
                "summary": "Find all form blocks question by a form block id",
                "description": "Find all form blocks question by a form block id",
                "operationId": "findAll_4",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Delete Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find form block question for form block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FormBlockQuestion"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "forms"
                ],
                "summary": "Update a list of Form Block Questions",
                "description": "if the answerEntityId field is updated, all FORM BLOCK QUESTION BRANCHES belonging to this FORM BLOCK QUESTION will be removed.",
                "operationId": "updateFormBlockQuestions",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find for Form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find for form block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "List of Form Block Questions info to be updated",
                                "items": {
                                    "$ref": "#/components/schemas/FormBlockQuestion"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FormBlockQuestion"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "forms"
                ],
                "summary": "Create a new Form Block Question",
                "description": "Create a new Form Block Question",
                "operationId": "createFormBlockQuestion",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Delete Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find form block question for form block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormBlockQuestion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormBlockQuestion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms/{formId}/blocks/{formBlockId}/questions/{questionId}": {
            "put": {
                "tags": [
                    "forms"
                ],
                "summary": "Update a Form Block Question",
                "description": "if the answerEntityId field is updated, all FORM BLOCK QUESTION BRANCHES belonging to this FORM BLOCK QUESTION will be removed.",
                "operationId": "updateFormBlockQuestion",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find for Form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find for form block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "Update Form Block Question ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormBlockQuestion"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormBlockQuestion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "forms"
                ],
                "summary": "Create a new Form Block Question Branch",
                "description": "Create a new Form Block Question Branch",
                "operationId": "createFormBlockQuestionBranch",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find form block question for form block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "Find Form Block Question ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormBlockQuestionBranch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormBlockQuestionBranch"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "forms"
                ],
                "summary": "Delete an Form Block Question",
                "description": "Delete an Form Block Question",
                "operationId": "deleteFormBlockQuestion",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find for Form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find for Form Block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "Delete Form Block Question by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms/{formId}/blocks/{formBlockId}": {
            "delete": {
                "tags": [
                    "forms"
                ],
                "summary": "Delete an Form Block",
                "description": "Delete an Form Block",
                "operationId": "deleteFormBlock",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find for Form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Delete Form Block by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms/{formId}/blocks/{formBlockId}/questions/{questionId}/branch/{branchId}": {
            "put": {
                "tags": [
                    "forms"
                ],
                "summary": "Update an Form Block Question Branch",
                "description": "Update an Form Block Question Branch",
                "operationId": "updateFormBlockQuestionBranch",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find for Form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find for Form Block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "Find Form Block Question by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "branchId",
                        "in": "path",
                        "description": "Update Form Block Question Branch by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormBlockQuestionBranch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormBlockQuestionBranch"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "forms"
                ],
                "summary": "Delete an Form Block Question Branch",
                "description": "Delete an Form Block Question Branch",
                "operationId": "deleteFormBlockQuestionBranch",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find for Form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formBlockId",
                        "in": "path",
                        "description": "Find for Form Block ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "Find Form Block Question by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "branchId",
                        "in": "path",
                        "description": "Delete Form Block Question Branch by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms": {
            "get": {
                "tags": [
                    "forms"
                ],
                "summary": "Find all Agent Forms by agent ID",
                "description": "Find all Agent Forms by agent ID",
                "operationId": "findAll_5",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentForm"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "forms"
                ],
                "summary": "Create a new Agent Form",
                "description": "Create a new Agent Form, by default a Form block will be created with the name Form Block 1",
                "operationId": "createAgentForm",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentForm"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/forms/{formId}": {
            "put": {
                "tags": [
                    "forms"
                ],
                "summary": "Update an Agent Form",
                "description": "Update an Agent Form",
                "operationId": "updateAgentForm",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Update Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentForm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentForm"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "forms"
                ],
                "summary": "Delete an Agent Form",
                "description": "Delete an Agent Form",
                "operationId": "deleteAgentForm",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Delete Agent Form by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/agents/{agentId}/forms": {
            "post": {
                "tags": [
                    "forms"
                ],
                "summary": "Create a new Agent Form",
                "description": "Version 2 of form. Create a new Agent Form, by default a Form block will be created with the name Form Block 1",
                "operationId": "createAgentFormV2",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find Agent form data for Agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Form"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Form"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/formdata": {
            "get": {
                "tags": [
                    "forms"
                ],
                "summary": "Find data for Form CSV.",
                "description": "A normal request must include deploy ID, start time and fields.",
                "operationId": "findAll_6",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find customer form data for deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find sessions that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find sessions that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Returned fields",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "example": "first_name,last_name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data to be use to generate CSV.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormData"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/formdata/{formId}": {
            "get": {
                "tags": [
                    "forms"
                ],
                "summary": "Find data for Form CSV by form ID.",
                "description": "A normal request must include form ID and deploy ID.",
                "operationId": "findAllByFormId",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find customer form data for deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "Find customer form data for form ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Only find sessions that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data to be use to generate CSV.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormData"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}/actions/{actionId}": {
            "get": {
                "tags": [
                    "intent-actions"
                ],
                "summary": "Find an Intent Action by ID",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "findById_5",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find intent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Find intent action for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "intent-actions"
                ],
                "summary": "Update an intent action.",
                "description": "It will update all related tables.If submitted ID is not found in the database, 404 is return.",
                "operationId": "updateIntentAction",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Update intent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Update intent action for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentAction"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "intent-actions"
                ],
                "summary": "Delete an Intent Action",
                "description": "Delete an Intent Action and all related tables.",
                "operationId": "deleteIntentAction",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Delete intent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Delete intent action for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}/actions": {
            "get": {
                "tags": [
                    "intent-actions"
                ],
                "operationId": "findAll_7",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find intent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentAction"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "intent-actions"
                ],
                "summary": "Perform action of creates or update and delete intent actions.",
                "description": "Create or update related tables of intent actions.",
                "operationId": "createIntentActions",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find intent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentActionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}/actions/{actionId}/action-choices/{actionChoiceId}": {
            "delete": {
                "tags": [
                    "intent-actions"
                ],
                "summary": "Delete an Intent Action Choice",
                "description": "Delete an Intent Action Choice and re-order the items.",
                "operationId": "deleteIntentActionChoice",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Delete action for intent with ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Delete intent action for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "actionChoiceId",
                        "in": "path",
                        "description": "Delete intent action choice for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/categories/{intentCategoryId}": {
            "get": {
                "tags": [
                    "intent-categories"
                ],
                "summary": "Find an Intent Category by ID",
                "description": "If submitted ID is not found in the database, 404 is return. If submitted includeIntents flag is true, will embedded intents on category",
                "operationId": "findById_6",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find agent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentCategoryId",
                        "in": "path",
                        "description": "Find intent category for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "include_intents",
                        "in": "query",
                        "description": "Include intents of the category",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "include_actions",
                        "in": "query",
                        "description": "Include intent actions of each intents",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentCategory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "intent-categories"
                ],
                "summary": "Updates an Intent Category by ID",
                "description": "If submitted ID is not found in the database, 404 is return. If submitted includeIntents flag is true, will embedded intents on categoryIf is system intent category, 400 is return.",
                "operationId": "update_1",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find agent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentCategoryId",
                        "in": "path",
                        "description": "Find intent category for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentCategoryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentCategory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "intent-categories"
                ],
                "summary": "Deletes an Intent Category by ID",
                "description": "If submitted ID is not found in the database, 404 is return. If submitted category is related to intent it can't be deleted. If is system intent category, 400 is return.",
                "operationId": "delete_2",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find agent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentCategoryId",
                        "in": "path",
                        "description": "Find intent category for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/categories": {
            "get": {
                "tags": [
                    "intent-categories"
                ],
                "summary": "Find a list Intent Categories for provided criteria",
                "description": "If submitted agent ID is not found in the database, will return empty. If submitted includeIntents flag is true, will embedded intents on category",
                "operationId": "findAll_8",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find categories for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "include_intents",
                        "in": "query",
                        "description": "Include intents of the category",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "include_actions",
                        "in": "query",
                        "description": "Include intent actions of each intents",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentCategory"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "intent-categories"
                ],
                "summary": "Create a new Intent Category",
                "description": "Create a new Intent Category",
                "operationId": "addIntentCategory",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find agent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentCategory"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentCategory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}": {
            "get": {
                "tags": [
                    "intents"
                ],
                "summary": "Find an Intent by ID",
                "description": "If submitted ID is not found in the database, 404 is return.",
                "operationId": "findById_7",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find intent for ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Intent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "intents"
                ],
                "summary": "Update an Intent by ID",
                "description": "Update an Intent by ID",
                "operationId": "updateIntent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Update Intent by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Intent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Intent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "intents"
                ],
                "summary": "Remove all entities related to Intents",
                "description": "Remove all entities related to Intents, If they exist",
                "operationId": "deleteIntent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Delete Intent by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Intent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents": {
            "get": {
                "tags": [
                    "intents"
                ],
                "summary": "Find a list Intent for provided criteria",
                "description": "If submitted deploy ID or agent ID or category ID is not found in the database, will return empty. If no deploy ID, it will find all intents by agents for logged in user.If category ID is submitted, will ignore the rest and find by category ID.",
                "operationId": "findAll_9",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find agent for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Find agent for category ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Intent"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "intents"
                ],
                "summary": "Create a new Intent",
                "description": "Create a new Intent",
                "operationId": "addIntent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Intent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Intent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}/inputs/{inputId}": {
            "get": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Find an Intent Input by ID",
                "description": "If submitted Intent Input ID is not found in the database, null is return.",
                "operationId": "findById_8",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "inputId",
                        "in": "path",
                        "description": "Find Intent Input by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Update an Intent Input",
                "description": "Update an Intent Input",
                "operationId": "updateIntentInput",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "inputId",
                        "in": "path",
                        "description": "Find for input ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Delete an Intent Input",
                "description": "Delete an Intent Input",
                "operationId": "deleteIntentInput",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "inputId",
                        "in": "path",
                        "description": "Delete Intent Input by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}/inputs": {
            "get": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Find all Intent Input",
                "description": "Find all Intent Input",
                "operationId": "findAll_10",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentInput"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Update an list of Intent Inputs",
                "description": "Update Intent Inputs",
                "operationId": "updateIntentInputs",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Object with Intent Input info to be updated",
                                "items": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IntentInput"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Create an Intent Input",
                "description": "Create an Intent Input",
                "operationId": "addIntentInput",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Object with Intent Input info to be created",
                                "items": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/agents/{agentId}/intents/{intentId}/inputs/transcript": {
            "post": {
                "tags": [
                    "intent-input"
                ],
                "summary": "Create an Intent Input",
                "description": "Create an Intent Input",
                "operationId": "addIntentInputUpdateTranscript",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Find for agent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "intentId",
                        "in": "path",
                        "description": "Find for intent ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentInputRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntentInput"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "tags": [
                    "me"
                ],
                "summary": "Find your information.",
                "description": "Find the logged user data.",
                "operationId": "findMe",
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "examples": {
                                    "confirmation-success": {
                                        "value": {
                                            "email": "bob@duh.com"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "me"
                ],
                "summary": "Update your information",
                "description": "update the user's own information",
                "operationId": "updateUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me/account": {
            "get": {
                "tags": [
                    "me"
                ],
                "summary": "Find your account information.",
                "description": "Find the account for logged user.",
                "operationId": "findMeAccount",
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me/change-password": {
            "put": {
                "tags": [
                    "me"
                ],
                "summary": "Reset your password",
                "description": "update the user's own password",
                "operationId": "resetPassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserChangePassRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me/avatar": {
            "put": {
                "tags": [
                    "me"
                ],
                "summary": "Upload an Avatar image for me",
                "description": "Upload an Avatar image for logged user. ",
                "operationId": "uploadAvatarImage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Avatar image",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "multipart/form-data": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "tags": [
                    "sessions"
                ],
                "summary": "Find a list of sessions for provided criteria",
                "description": "If no deploy or agent IDs sent this will return all sessions the user has access to. If IDs are sent they must be *either* deploy or agent, sending both is not allowed.",
                "operationId": "getAll",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find sessions that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find sessions that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find sessions for deployment ID(s), 0 to many",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    },
                    {
                        "name": "agent_id",
                        "in": "query",
                        "description": "Find sessions for agent ID(s), 0 to many",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "0"
                                }
                            }
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "20"
                                }
                            }
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Session"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sessions/transcripts": {
            "get": {
                "tags": [
                    "sessions"
                ],
                "summary": "Find a list of sessions for provided criteria",
                "description": "If no deploy or agent IDs sent this will return all sessions the user has access to. If IDs are sent they must be *either* deploy or agent, sending both is not allowed.",
                "operationId": "getAllWithTranscripts",
                "parameters": [
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find sessions that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find sessions that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find sessions for deployment ID(s), 0 to many",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Session"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/trainings": {
            "get": {
                "tags": [
                    "trainings"
                ],
                "summary": "Get all user utterance.",
                "description": "List of all user utterance within specified date range.",
                "operationId": "getAll_1",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find data for deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "confidence",
                        "in": "query",
                        "description": "Find data for confidence value",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "name": "start_time",
                        "in": "query",
                        "description": "Only find transcripts that occurred after this time. Must be an ISO-8601 timestamp (UTC).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-08-31T15:12:10Z"
                    },
                    {
                        "name": "end_time",
                        "in": "query",
                        "description": "Only find transcripts that occurred before this time, defaults to 'now'. Must be an ISO-8601 timestamp (UTC).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "example": "2018-09-31T15:12:10Z"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "0"
                                }
                            }
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "integer",
                                    "default": "20"
                                }
                            }
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Training"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/trainings/{sessionId}/sessions": {
            "get": {
                "tags": [
                    "trainings"
                ],
                "summary": "Get training session by ID.",
                "description": "List of training logs for a session.",
                "operationId": "findBySessionId",
                "parameters": [
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Find data for session ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "confidence",
                        "in": "query",
                        "description": "Find data for confidence value",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TrainingDetail"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/trainings/{transcriptLogId}/flag": {
            "put": {
                "tags": [
                    "trainings"
                ],
                "operationId": "flagRecord",
                "parameters": [
                    {
                        "name": "deploy_id",
                        "in": "query",
                        "description": "Find data for deployment ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "transcriptLogId",
                        "in": "path",
                        "description": "Find training log record to flag",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "flag_value",
                        "in": "query",
                        "description": "Value to set in flag",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TrainingUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/transcripts/{sessionId}": {
            "get": {
                "tags": [
                    "transcripts"
                ],
                "summary": "Get user chat transcripts by specific session",
                "description": "List of user all chat transcript logs within specified session.",
                "operationId": "findBySession",
                "parameters": [
                    {
                        "name": "sessionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Transcript"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find an User by ID",
                "description": "If submitted ID is not found in the database, null is return.",
                "operationId": "findById_9",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Find user by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an User",
                "description": "Update an User and roles for that user. ",
                "operationId": "updateUser_1",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Update user by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete an User",
                "description": "Delete an User and roles for that user",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Delete user by User ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find a list Users for provided criteria",
                "description": "Find all Users for logged user account.",
                "operationId": "findAll_11",
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserList"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create a new User",
                "description": "Create a new User and roles for that user.",
                "operationId": "addUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{userId}/change-password": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Reset password for an User",
                "description": "Reset password for an User giving an exist password. ",
                "operationId": "resetPassword_1",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Find user ID to change password",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserChangePassRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/users/{userId}/avatar": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Upload an Avatar image for an user",
                "description": "Upload an Avatar image for an user, the file size cannot be greater than 3mb",
                "operationId": "uploadAvatarImage_1",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Find user ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Avatar image",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "multipart/form-data": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{userId}/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Find User's Roles by UserId",
                "description": "Find all user's roles by a User ID. If submitted ID is not found in the database, null is return.",
                "operationId": "findRoleByUserId",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Find user by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RoleMaster"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Add roles to an User by email",
                "description": "Add a new role to an user.",
                "operationId": "addRoleToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Add role to an user by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRoleIdsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete a roles to an User by email",
                "description": "Delete a new role to an user",
                "operationId": "deleteRoleToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Delete role to an user by ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 93
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRoleIdsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deploy-attributes/bot": {
            "get": {
                "tags": [
                    "webchat"
                ],
                "summary": "Find deployment attributes by API key",
                "description": "Unauthenticated endpoint that bots can use to pull their attributes",
                "operationId": "findByApiKey_1",
                "parameters": [
                    {
                        "name": "apiKey",
                        "in": "query",
                        "description": "API Key for attributes",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "botco_api_k915kiot_71993"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The attributes for this deploy ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeployAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The API key does not exist"
                    }
                }
            }
        },
        "/tracking/click": {
            "post": {
                "tags": [
                    "clicking-tracking"
                ],
                "summary": "Tracking button Clicked in a bot",
                "description": "Handler for each intent button, that sends data to the backend, with the intentName, button ID, action type, payload",
                "operationId": "doClick",
                "parameters": [
                    {
                        "name": "apiKey",
                        "in": "query",
                        "description": "apiKey for the bot",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClickingTracking"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The response for the user request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClickingTracking"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Agent": {
                "required": [
                    "agent_name",
                    "account_id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "account_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "avatar": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "agent_name": {
                        "maxLength": 45,
                        "minLength": 0,
                        "type": "string"
                    },
                    "is_template": {
                        "type": "boolean"
                    },
                    "is_public": {
                        "type": "boolean"
                    },
                    "welcome_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "parent_agent_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "EntityIdResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "AgentEntityItemRequest": {
                "required": [
                    "item_name"
                ],
                "type": "object",
                "properties": {
                    "synonyms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "entity_item_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "item_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "AgentEntityResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentEntityItemRequest"
                        }
                    },
                    "entity_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entity_name": {
                        "type": "string"
                    },
                    "entity_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "parent_entity_name": {
                        "type": "string"
                    }
                }
            },
            "AgentEntity": {
                "required": [
                    "agent_id",
                    "entity_name",
                    "entity_type"
                ],
                "type": "object",
                "properties": {
                    "entity_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entity_name": {
                        "type": "string"
                    },
                    "entity_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "parent_entity_name": {
                        "type": "string"
                    },
                    "create_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "create_user": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_user": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentEntityItem"
                        }
                    }
                }
            },
            "AgentEntityItem": {
                "required": [
                    "item_name"
                ],
                "type": "object",
                "properties": {
                    "entity_item_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "item_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                },
                "description": "Object with Agent Entity Item info to be updated"
            },
            "AgentEntityRequest": {
                "required": [
                    "entity_name"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentEntityItemRequest"
                        }
                    },
                    "entity_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entity_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "entity_type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "parent_entity_name": {
                        "type": "string"
                    }
                },
                "description": "Object with Agent Entity info to be updated"
            },
            "BotcoDashOverview": {
                "type": "object",
                "properties": {
                    "unique_users": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "incoming_messages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "messages_per_session": {
                        "type": "number",
                        "format": "float"
                    },
                    "engaged_sessions": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "avg_session_duration": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "BotcoDashMetric": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "result": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "ConversationWidget": {
                "type": "object",
                "properties": {
                    "opening_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "exit_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "inbound_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "outbound_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    }
                }
            },
            "Message": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "message": {
                        "type": "string"
                    },
                    "average": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "BotcoIntentEventOverview": {
                "type": "object",
                "properties": {
                    "intent_invokes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "event_invokes": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "BotcoIntentEventMessageOverview": {
                "type": "object",
                "properties": {
                    "intent_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "event_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    }
                }
            },
            "IntentMsg": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "BotCoDashSessionReEngagement": {
                "type": "object",
                "properties": {
                    "total_sessions": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "intent_name": {
                        "type": "string"
                    },
                    "engaged_sessions": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "engaged_sessions_percent": {
                        "type": "number",
                        "format": "double"
                    },
                    "ignored_sessions": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ignored_sessions_percent": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "BotCoDashSessionReEngagementResponse": {
                "type": "object",
                "properties": {
                    "sessions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BotCoDashSessionReEngagement"
                        }
                    },
                    "total_sessions": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "AppVersionResponse": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    }
                }
            },
            "AuthenticationResponse": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string"
                    },
                    "refresh_token": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "AuthenticationRequest": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "RefreshTokenRequest": {
                "required": [
                    "refresh_token"
                ],
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    }
                }
            },
            "CustomerAttribute": {
                "required": [
                    "agent_id",
                    "cust_attr_name",
                    "cust_attr_type"
                ],
                "type": "object",
                "properties": {
                    "cust_attr_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "cust_attr_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "cust_attr_type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "DeployAttribute": {
                "required": [
                    "header_title",
                    "header_background_color",
                    "header_text_color",
                    "chat_response_color",
                    "chat_response_text_color",
                    "logo_url",
                    "bot_url",
                    "welcome_message"
                ],
                "type": "object",
                "properties": {
                    "api_key": {
                        "type": "string"
                    },
                    "deploy_name": {
                        "type": "string"
                    },
                    "header_title": {
                        "type": "string"
                    },
                    "header_background_color": {
                        "type": "string"
                    },
                    "header_text_color": {
                        "type": "string"
                    },
                    "chat_response_color": {
                        "type": "string"
                    },
                    "chat_response_text_color": {
                        "type": "string"
                    },
                    "logo_url": {
                        "type": "string"
                    },
                    "bot_url": {
                        "type": "string"
                    },
                    "welcome_message": {
                        "type": "string"
                    },
                    "zendesk_api_key": {
                        "type": "string"
                    }
                }
            },
            "Deployment": {
                "required": [
                    "deploy_name",
                    "agent_id"
                ],
                "type": "object",
                "properties": {
                    "greeting": {
                        "type": "string"
                    },
                    "persistent": {
                        "type": "boolean"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_name": {
                        "type": "string"
                    },
                    "deploy_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "request_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "api_key": {
                        "type": "string"
                    },
                    "runtime_tenant_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "queue_in_name": {
                        "type": "string"
                    },
                    "queue_out_name": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_name": {
                        "type": "string"
                    },
                    "deploy_progress": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "request_status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_error": {
                        "type": "string"
                    },
                    "facebook_page_id": {
                        "type": "string"
                    },
                    "facebook_page_access_token": {
                        "type": "string"
                    },
                    "facebook_page_name": {
                        "type": "string"
                    },
                    "facebook_version": {
                        "type": "string"
                    },
                    "deploy_attributes": {
                        "$ref": "#/components/schemas/DeployAttribute"
                    }
                }
            },
            "DeploymentRequest": {
                "required": [
                    "deploy_name",
                    "attribute",
                    "deploy_type",
                    "agent_id"
                ],
                "type": "object",
                "properties": {
                    "attribute": {
                        "$ref": "#/components/schemas/DeployAttribute"
                    },
                    "greeting": {
                        "type": "string"
                    },
                    "persistent": {
                        "type": "boolean"
                    },
                    "deploy_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "deploy_type": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "api_key": {
                        "type": "string"
                    },
                    "runtime_tenant_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "facebook_page_id": {
                        "type": "string"
                    },
                    "facebook_page_access_token": {
                        "type": "string"
                    },
                    "facebook_page_name": {
                        "type": "string"
                    }
                },
                "description": "Update deploy attribute with this information"
            },
            "DeploymentFacebookMenu": {
                "type": "object",
                "properties": {
                    "fbMenuId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deployId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "menuLocale": {
                        "type": "string"
                    },
                    "agentId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "createDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createUser": {
                        "type": "string"
                    },
                    "updateDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updateUser": {
                        "type": "string"
                    },
                    "menuItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentFacebookMenuItem"
                        }
                    }
                }
            },
            "DeploymentFacebookMenuItem": {
                "type": "object",
                "properties": {
                    "fbMenuItemId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "parentItemId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "targetIntentId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "menuLevel": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "itemOrder": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "itemType": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "itemTitle": {
                        "type": "string"
                    },
                    "itemUrl": {
                        "type": "string"
                    },
                    "itemPayload": {
                        "type": "string"
                    },
                    "webviewHeightRatio": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "messengerExtensions": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fallbackUrl": {
                        "type": "string"
                    },
                    "webviewShareButton": {
                        "type": "string"
                    },
                    "targetFormId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "createDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createUser": {
                        "type": "string"
                    },
                    "updateDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updateUser": {
                        "type": "string"
                    },
                    "parentMenu": {
                        "$ref": "#/components/schemas/DeploymentFacebookMenu"
                    }
                }
            },
            "DeploymentFacebookGreeting": {
                "type": "object",
                "properties": {
                    "fb_greeting_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "greeting_text": {
                        "type": "string"
                    },
                    "greeting_locale": {
                        "type": "string"
                    }
                }
            },
            "ReferralContext": {
                "type": "object",
                "properties": {
                    "refer_context_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context_name": {
                        "type": "string"
                    }
                }
            },
            "Referral": {
                "type": "object",
                "properties": {
                    "refer_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "refer_code": {
                        "type": "string"
                    },
                    "referral_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReferralContext"
                        }
                    },
                    "intent_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "description": "Object with referral info to be created"
            },
            "FormBlock": {
                "required": [
                    "block_name",
                    "block_short_name"
                ],
                "type": "object",
                "properties": {
                    "form_block_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "form_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "block_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "block_short_name": {
                        "maxLength": 32,
                        "minLength": 0,
                        "type": "string"
                    },
                    "block_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "questions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormBlockQuestion"
                        }
                    }
                },
                "description": "Object with Form Block info to be created"
            },
            "FormBlockQuestionBranch": {
                "type": "object",
                "properties": {
                    "branch_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "branch_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "branch_entity_item_id": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "target_form_block_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "target_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "branch_name": {
                        "type": "string"
                    }
                },
                "description": "Form Block Questions Branch info to be updated"
            },
            "FormBlockQuestion": {
                "required": [
                    "ques_name"
                ],
                "type": "object",
                "properties": {
                    "question_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ques_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "ques_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ques_prompt": {
                        "type": "string"
                    },
                    "ques_required": {
                        "type": "boolean"
                    },
                    "answer_entity_id": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "cust_attr_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "target_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "target_form_block_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entity_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormBlockQuestionBranch"
                        }
                    }
                }
            },
            "AgentForm": {
                "type": "object",
                "properties": {
                    "form_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "form_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                },
                "description": "Object with Agent Form info to be updated"
            },
            "Attribute": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Branch": {
                "required": [
                    "name",
                    "short_name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "questions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Question"
                        }
                    },
                    "short_name": {
                        "maxLength": 32,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Button": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entity_item": {
                        "$ref": "#/components/schemas/EntityItem"
                    },
                    "target_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "target_form_block_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Entity": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntityItem"
                        }
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entity_type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "parent_name": {
                        "type": "string"
                    }
                }
            },
            "EntityItem": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "synonyms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Form": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Branch"
                        }
                    }
                },
                "description": "Object with Agent Form info to be created"
            },
            "Question": {
                "required": [
                    "name",
                    "prompt"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "prompt": {
                        "type": "string"
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "entity": {
                        "$ref": "#/components/schemas/Entity"
                    },
                    "attribute": {
                        "$ref": "#/components/schemas/Attribute"
                    },
                    "buttons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Button"
                        }
                    },
                    "target_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "target_form_block_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fallback_prompt": {
                        "type": "string"
                    }
                }
            },
            "FormData": {
                "type": "object",
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormDataRow"
                        }
                    }
                }
            },
            "FormDataRow": {
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/FormMetadata"
                    }
                }
            },
            "FormMetadata": {
                "type": "object",
                "properties": {
                    "platform_id": {
                        "type": "string"
                    },
                    "last_update": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "IntentActionChoice": {
                "type": "object",
                "properties": {
                    "action_choice_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "choice_type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "choice_title": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "choice_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_data": {
                        "type": "string"
                    },
                    "image_url": {
                        "maxLength": 204,
                        "minLength": 0,
                        "type": "string"
                    },
                    "bind_attr_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "bind_attr_value": {
                        "maxLength": 1024,
                        "minLength": 0,
                        "type": "string"
                    },
                    "action_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_form_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "IntentAction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "param1": {
                        "type": "string"
                    },
                    "param2": {
                        "type": "string"
                    },
                    "param3": {
                        "type": "string"
                    },
                    "param4": {
                        "type": "string"
                    },
                    "action_type": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "cust_attr_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "intent_choices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentActionChoice"
                        }
                    },
                    "intent_carousel": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentHChoose"
                        }
                    },
                    "api_params": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentApiParam"
                        }
                    },
                    "api_templates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentApiTemplate"
                        }
                    }
                }
            },
            "IntentApiParam": {
                "required": [
                    "api_param_name",
                    "api_param_value"
                ],
                "type": "object",
                "properties": {
                    "intent_api_param_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "api_param_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "api_param_value": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "IntentApiTemplate": {
                "required": [
                    "template_location",
                    "template_url"
                ],
                "type": "object",
                "properties": {
                    "intent_api_template_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "template_location": {
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string"
                    },
                    "template_url": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "template_data": {
                        "type": "string"
                    }
                }
            },
            "IntentHChooseButton": {
                "type": "object",
                "properties": {
                    "h_button_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "h_choose_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "h_button_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "h_button_title": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "h_button_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_data": {
                        "maxLength": 2048,
                        "minLength": 0,
                        "type": "string"
                    },
                    "bind_attr_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "bind_attr_value": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "action_intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_form_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "IntentHChoose": {
                "type": "object",
                "properties": {
                    "h_choose_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "h_choose_title": {
                        "maxLength": 2088,
                        "minLength": 0,
                        "type": "string"
                    },
                    "h_choose_subtitle": {
                        "maxLength": 2088,
                        "minLength": 0,
                        "type": "string"
                    },
                    "image_url": {
                        "maxLength": 2088,
                        "minLength": 0,
                        "type": "string"
                    },
                    "click_url": {
                        "maxLength": 2088,
                        "minLength": 0,
                        "type": "string"
                    },
                    "h_choose_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "h_choose_buttons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentHChooseButton"
                        }
                    }
                }
            },
            "IntentActionDeleteRequest": {
                "type": "object",
                "properties": {
                    "action_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action_type": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "IntentActionRequest": {
                "type": "object",
                "properties": {
                    "cards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentAction"
                        }
                    },
                    "intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deleted_cards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentActionDeleteRequest"
                        }
                    }
                },
                "description": "Find intent action for ID"
            },
            "IntentCategoryContextIn": {
                "type": "object",
                "properties": {
                    "cat_context_in_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context_name": {
                        "type": "string"
                    }
                }
            },
            "IntentCategoryContextOut": {
                "type": "object",
                "properties": {
                    "lifespan": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "cat_context_out_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context_name": {
                        "type": "string"
                    }
                }
            },
            "IntentCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "intents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Intent"
                        }
                    },
                    "category_name": {
                        "type": "string"
                    },
                    "category_order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_system": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "intent_cat_context_ins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentCategoryContextIn"
                        }
                    },
                    "intent_cat_context_outs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentCategoryContextOut"
                        }
                    }
                },
                "description": "Object with Intent category info to be created"
            },
            "IntentContextIn": {
                "type": "object",
                "properties": {
                    "context_in_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context_name": {
                        "type": "string"
                    }
                }
            },
            "IntentContextOut": {
                "type": "object",
                "properties": {
                    "lifespan": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context_out_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "context_name": {
                        "type": "string"
                    }
                }
            },
            "Intent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "language": {
                        "type": "string"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "category_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "intent_name": {
                        "type": "string"
                    },
                    "intent_type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeout_interval": {
                        "type": "string"
                    },
                    "poll_interval": {
                        "type": "string"
                    },
                    "intent_context_ins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentContextIn"
                        }
                    },
                    "intent_context_outs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentContextOut"
                        }
                    },
                    "intent_input_params": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentInputParam"
                        }
                    },
                    "intent_actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntentAction"
                        }
                    }
                }
            },
            "IntentInputParam": {
                "type": "object",
                "properties": {
                    "input_param_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "param_name": {
                        "type": "string"
                    },
                    "param_type": {
                        "type": "string"
                    },
                    "is_required": {
                        "type": "boolean"
                    },
                    "save_attr_name": {
                        "type": "string"
                    }
                }
            },
            "IntentCategoryRequest": {
                "type": "object",
                "properties": {
                    "category_name": {
                        "type": "string"
                    }
                },
                "description": "Request fields to update"
            },
            "IntentInput": {
                "type": "object",
                "properties": {
                    "input_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "input_value": {
                        "type": "string"
                    },
                    "intent_id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "IntentInputRequest": {
                "type": "object",
                "properties": {
                    "input_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "input_value": {
                        "type": "string"
                    },
                    "intent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "training_log_id": {
                        "type": "string"
                    }
                },
                "description": "Object with Intent Input info to be created"
            },
            "RoleMaster": {
                "type": "object",
                "properties": {
                    "role_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "role_name": {
                        "type": "string"
                    }
                }
            },
            "UserList": {
                "required": [
                    "email"
                ],
                "type": "object",
                "properties": {
                    "email": {
                        "maxLength": 250,
                        "minLength": 0,
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "nullable": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleMaster"
                        }
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "account_id": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_active": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "create_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "create_user": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_user": {
                        "type": "string"
                    },
                    "first_name": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true
                    },
                    "last_name": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string",
                        "nullable": true
                    },
                    "user_avatar": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "User": {
                "required": [
                    "email"
                ],
                "type": "object",
                "properties": {
                    "email": {
                        "maxLength": 250,
                        "minLength": 0,
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "nullable": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleMaster"
                        }
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "account_id": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_active": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "create_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "create_user": {
                        "type": "string"
                    },
                    "update_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_user": {
                        "type": "string"
                    },
                    "first_name": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "last_name": {
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "user_avatar": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "Account": {
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "account_name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "deploy_env_default": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_shard_default": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "UserChangePassRequest": {
                "required": [
                    "new_password"
                ],
                "type": "object",
                "properties": {
                    "new_password": {
                        "type": "string"
                    }
                },
                "description": "Object with User's actual password and new password"
            },
            "Session": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "agent_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "messages_in": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "messages_out": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "exit_message": {
                        "type": "string"
                    },
                    "open_message": {
                        "type": "string"
                    },
                    "session_start": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "session_end": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Training": {
                "type": "object",
                "properties": {
                    "dialog": {
                        "type": "string"
                    },
                    "responses": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "channel": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "session_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "no_matches": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "session_end": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "is_flagged": {
                        "type": "boolean"
                    }
                }
            },
            "TrainingDetail": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "responses": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "session_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "date_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "no_matches": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "user_records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TrainingUser"
                        }
                    }
                }
            },
            "TrainingUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "user_message": {
                        "type": "string"
                    },
                    "response_intent": {
                        "$ref": "#/components/schemas/Intent"
                    },
                    "is_match": {
                        "type": "boolean"
                    },
                    "is_flagged": {
                        "type": "boolean"
                    }
                }
            },
            "Transcript": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "sender": {
                        "type": "string"
                    },
                    "payload": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserRoleIdsRequest": {
                "required": [
                    "role_id"
                ],
                "type": "object",
                "properties": {
                    "role_id": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                "description": "Array with those role Ids to be Deleted"
            },
            "ClickingTracking": {
                "type": "object",
                "properties": {
                    "payload": {
                        "type": "string"
                    },
                    "click_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploy_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "button_text": {
                        "type": "string"
                    },
                    "button_type": {
                        "type": "string"
                    }
                },
                "description": "clicked button data"
            }
        }
    }
}